#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <vector>

int uniqueKnapsack(std::vector<int>& weights, std::vector<int>& used, int W, int n) {
    std::vector<std::vector<long long>> value(W + 1, std::vector<long long>(n + 1));
    for (size_t i = 1; i <= n; ++i) {
        for (size_t w = 1; w <= W; ++w) {
            value[w][i] = value[w][i - 1];
            if (weights[i - 1] <= w && used[i - 1] == 0) {
                if (value[w - weights[i - 1]][i - 1] + weights[i - 1] > value[w][i]) {
                    value[w][i] = value[w - weights[i - 1]][i - 1] + weights[i - 1];
                }
            }

        }
    }
    int val = value[W][n];
    while (W > 0 && n > 0) {
        while (value[W][n] == value[W][n - 1]) {
            --n;
        }
        used[n - 1] == 1;
        W -= weights[n - 1];
    }
    return val;
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> values(n);
    std::vector<int> used(n);
    int sum = 0;
    for (size_t i = 0; i < n; ++i) {
       std::cin >> values[i];
        sum += values[i];
    }
    if (sum % 3 != 0) {
        std::cout << "0\n";
    } else {
        int part = sum / 3;
        int part1 = uniqueKnapsack(values, used, part, n);
        if (part1 != part) {
            std::cout << "0\n";
            return 0;
        }
        int part2 = uniqueKnapsack(values, used, part, n);
        if (part2 != part) {
            std::cout << "0\n";
            return 0;
        }
        int part3 = uniqueKnapsack(values, used, part, n);
        if (part3 != part) {
            std::cout << "0\n";
            return 0;
        }
        std::cout << "1\n";
    }

}
